# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS which will be run by Fargate when a release is created
name: Build and Push docker image to ECR

on:
  push:
    branches:
      - add-prometheus-metrics


concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-push:
    name: Build and Push docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: worker-prometheus-test           
        run: |

          IMAGE_TAG="test-latest"

          # compute-node HEADS
          ECR_REPOSITORY_HEAD="${ECR_REPOSITORY}-head"

          docker build --pull -f docker/Dockerfile_head \
              --build-arg "GH_TOKEN=${{ secrets.GH_READONLY_PAT }}" \
              -t $ECR_REGISTRY/$ECR_REPOSITORY_HEAD:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_HEAD:$IMAGE_TAG

          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          # compute-node workers
          docker build --pull -f docker/Dockerfile_worker \
              --build-arg "GH_TOKEN=${{ secrets.GH_READONLY_PAT }}" \
              -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
